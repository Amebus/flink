void fillStringWith(int si,int sl, char c, char *s)
{
    for (; si < sl; si++) {
        s[si] = c;
    }
}

//ser macro(
#define SER_INT(i, si, r, t)								\
        t = (unsigned char*) &i;							\
        for(int _ser_i = 0; _ser_i < 4; _ser_i++, si++)	\
        {													\
            r[si] = t[_ser_i];							\
        }													\

#define SER_DOUBLE(d, si, r, t)							\
        t = (unsigned char*) &d;							\
        for(int _ser_i = 0; _ser_i < 8; _ser_i++, si++)	\
        {													\
            r[si] = t[_ser_i];								\
        }													\

#define SER_STRING(s, si, l, r, t)             \
        SER_INT(l, si, r, t);					\
        for(int _ii = 0; _ii < l; _ii++, si++) \
        {                                      \
            r[si] = s[_ii];                    \
        }                                      \



//deser macro(
#define DESER_INT(d, si, r) 				\
			r = (*(__local int*) &d[si]);	\
			si+=4;							\

#define DESER_DOUBLE(d, si, r)  				\
			r = (*(__local double*) &d[si]);	\
			si+=8;								\

#define DESER_STRING(d, si, rs, ri) 			\
            DESER_INT(d, si, ri);   			\
            rs = (__local char *)&d[si]; 	\
            si+=ri;                 			\



#define INT 1
#define DOUBLE 2
#define STRING 3


#define LAST_STEP 1

__kernel void <[kernel-name]>(
	__global unsigned char *_midResult,
	__global unsigned char *_identity,
    __global unsigned char *_finalResult,
	__local unsigned char *_localCache,
    int _isNotFinalStep)
{
    unsigned char* _serializationTemp;
    uint _globalId = get_global_id(0);
    uint _globlSize = get_global_size(0);

    uint _localId = get_local_id(0);
    uint _groupId = get_group_id(0);
    uint _groupSize = get_local_size(0);

    uint _outputCount = get_num_groups(0);

    // <[utility-vars]>

    uint _localCacheDim = _groupSize * _otd;
    int _i = _globalId * _otd;
    int _userIndex = _i;

    uint _uiTemp = 0;
    int _iTemp = 0;
    bool _continueCopy = 1;
    uint _copyLength = 0;

    // <[local-a]>

    // <[local-b]>

    // for(uint i = 0, j = _i; i < _otd; i++, j++)
    // {
    //     _midResults[j] = _identity[i];
    // }
    

    // barrier(CLK_GLOBAL_MEM_FENCE);

    // maybe not needed
    // init _localCache to '\0' | TODO -> only if contains string
    // for(uint i = _localId; i < _localCacheDim; i+= _grSize)
    // {
    //     _localCache[i] = '\0';
    // }
    // barrier(CLK_LOCAL_MEM_FENCE);

    //copy from global to local
    for(int i = _i, k = _localId * _otd, j = 0; j > _otd; j++)
    {
        _localCache[k++] = _midResult[i++];
    }

            
    barrier(CLK_LOCAL_MEM_FENCE);

    for(uint _stride = _groupSize/2; _stride > 0 ; _stride /= 2)
    {
        if(_localId < _stride)
        {
            _iTemp = _localId * _otd;
            // <[deser-a]>

            _iTemp = _localId * _otd + _stride * _otd;

            // <[deser-b]>
            
            // <[user-function]>

            _iTemp = _localId * _otd;

            // <[serialize-to-local]>
            
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }

    if (_isNotFinalStep)
    {
        for(uint i = 0, j = _groupId * _otd; i < _otd; i++, j++)
        {
            _midResult[j] = _localCache[i];
            // printf("_gId: %d, _localCache: %d\n", _gId, (*(__local int*) &_localCache[i]) );
        }
        if(_lId == 0)
        {
            // printf(" -- printing local cache ---\n");
            // for(int i = 0; i < 8; i++)	
            //     printf("_gId: 0 --- _lc: %d\n", _localCache[i]);
            printf("\n");
            for(int i = 0; i < 8; i+=4)
                // printf("_midResults: %d %d %d %d %d\n", _midResults[i], _midResults[i+1], _midResults[i+2], _midResults[i+3],(*(__global int*) &_midResults[i]) );
                printf("_gId: %d, _localCache: %d\n", _gId, (*(__local int*) &_localCache[i]) );
        
        }
    }
    else 
    {
        if(_globalId == 0) // copiare in parallelo
        {
            //printf("final result copy - %d\n", _ri);
            for(int i = 0, j = _roff; i < _otd; i++, j++)
            {
                _finalResult[j] = _localCache[i];
                //printf("_lc - %d\n", _localCache[i]);
            }
        }
        //printf("_finalResult - %d\n", _finalResult[5]);
    }
    barrier(CLK_GLOBAL_MEM_FENCE);

};