void fillStringWith(int si,int sl, char c, char *s)
{
    for (; si < sl; si++) {
        s[si] = c;
    }
}

void integerToString(int n, char *s, int sl)
{
    fillStringWith(0, sl, '\0', s);
    char const digit[] = "0123456789";
    char* p = s;
    if(n<0){
        *p++ = '-';
        n *= -1;
    }
    int shifter = n;
    do{
        ++p;
        shifter = shifter/10;
    }while(shifter);
    *p = '\0';
    do{
        *--p = digit[n%10];
        n = n/10;
    }while(n);
}

int stringToInteger(char *s)
{
    const char z = '0';
    int r = 0, st = 0, p = 1;
    
    while(s[st] != '\0')
    {
        st++;
    }
    for(int i = st-1; i >= 0 && s[i] != '-' ; i--)
    {
        r+=((s[i]-z)*p);
        p*=10;
    }
    if(s[0]=='-')
    {
        r*=-1;
    }
    return r;
}

int globalStringToInteger(__global char *s)
{
    const char z = '0';
    int r = 0, st = 0, p = 1;
    
    while(s[st] != '\0')
    {
        st++;
    }
    for(int i = st-1; i >= 0 && s[i] != '-' ; i--)
    {
        r+=((s[i]-z)*p);
        p*=10;
    }
    if(s[0]=='-')
    {
        r*=-1;
    }
    return r;
}

#define DESER_INT(d, si, r) 				\
			r = (*(__global int*) &d[si]);	\
			si+=4;							\

#define DESER_DOUBLE(d, si, r)  				\
			r = (*(__global double*) &d[si]);   \
			si+=8;							    \

#define DESER_STRING(d, si, rs, ri) 	    \
            DESER_INT(d, si, ri);   		\
            rs = (__global char *)&d[si];   \
            si+=ri;                 		\

__kernel void <[kernel-name]>(
    __global unsigned char *_data,
    __global int *_dataIndexes, 
    __global unsigned char *_result,
    int _totalInputTuples)
{
    uint _gId = get_global_id(0);
    printf("_gId: %d - _totalInputTuples: %d \n", _gId, _totalInputTuples);
    if (_gId >= _totalInputTuples)
        return;

    // utility-vars
    int _i = _dataIndexes[_gId];
    int _userIndex = _i;
    <[utility-vars]>

    <[input-vars]>

    // output-tuple
    unsigned char _r;

    <[deserialization]>
    <[user-function]>

    // serialization
    _result[_gId] = _r;
}